---
import PortfolioCard from "@/components/PortfolioCard.astro";
import PortfolioModal from "@/components/PortfolioModal.astro";
import Button from "@/components/ui/Button.astro";
import { getFirstInvitaciones, getMoreInvitaciones } from "@/data/invitaciones";

const invitaciones = getFirstInvitaciones();
const moreInvitaciones = getMoreInvitaciones();
const showMoreButton = moreInvitaciones.length > 0;
---

<section id="demos" class="py-20 lg:py-32 px-6 relative overflow-x-hidden">
  <div class="absolute inset-0">
    <div
      class="absolute bottom-10 left-1/4 w-96 h-96 rounded-full opacity-10 bg-teal-500 blur-3xl"
    >
    </div>
    <div
      class="absolute top-10 right-1/3 w-80 h-80 rounded-full opacity-10 bg-sky-500 blur-3xl"
    >
    </div>
  </div>
  <div class="max-w-7xl mx-auto relative z-10">
    <!-- Headline -->
    <div class="text-center mb-20">
      <h2 class="font-sora font-bold text-4xl lg:text-6xl text-gray-900 mb-6">
        Invitaciones Digitales que <span class="text-indigo-600">Inspiran</span>
      </h2>
      <p
        class="font-sora font-normal text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed mb-8"
      >
        Creamos experiencias únicas para bodas, eventos corporativos y
        celebraciones especiales. No usamos plantillas: cada invitación es
        diseñada y programada a la medida.
      </p>
    </div>

    <!-- Grid de proyectos -->
    <ul
      id="portfolio-grid"
      class="grid grid-cols-1 xs:grid-cols-2 lg:grid-cols-4 gap-6"
    >
      {
        invitaciones.map((invitacion, index) => (
          <PortfolioCard project={invitacion} index={index} />
        ))
      }
    </ul>

    <!-- Botón mostrar más -->
    {
      showMoreButton && (
        <div id="show-more-container" class="text-center mt-16">
          <Button
            id="show-more-btn"
            variant="secondary"
            size="lg"
            className="xs:min-w-[280px] h-[56px]"
          >
            <span class="btn-text">Mostrar Más Proyectos</span>
            <div class="btn-loader hidden">
              <>
                <span class="dot" />
                <span class="dot" />
                <span class="dot" />
              </>
            </div>
          </Button>
        </div>
      )
    }

    <!-- Nota de confianza -->
    <p class="text-center text-gray-500 text-sm mt-12 font-sora">
      ⭐ Tu invitación personalizada también podrá aparecer en nuestro
      portafolio para inspirar a otros clientes.
    </p>
  </div>

  <PortfolioModal />
</section>

<script>
  import {
    getInvitacionModalData,
    getMoreInvitaciones,
  } from "@/data/invitaciones";

  const grid = document.querySelector("#portfolio-grid");
  const showMoreBtn = document.querySelector("#show-more-btn");

  // Función para asignar el evento de abrir modal a una card
  function attachCardModal(card) {
    const li = card;
    li.addEventListener("click", () => {
      const index = parseInt(li.dataset.index!, 10);
      const data = getInvitacionModalData(index);
      if (data) {
        window.dispatchEvent(new CustomEvent("openModal", { detail: data }));
      }
    });
  }

  // Asignar modal a las cards iniciales
  grid.querySelectorAll("li").forEach(attachCardModal);

  // Manejar botón "Mostrar Más"
  showMoreBtn?.addEventListener("click", () => {
    showMoreBtn.classList.add("is-loading");

    setTimeout(() => {
      const offset = grid.children.length;
      const newInvitaciones = getMoreInvitaciones(offset);

      if (newInvitaciones.length === 0) {
        showMoreBtn.parentElement?.classList.add("hidden");
        showMoreBtn.classList.remove("is-loading");
        return;
      }

      // Tomamos el primer card como template
      const templateCard = grid.querySelector("li");
      if (!templateCard) return;

      newInvitaciones.forEach((inv, i) => {
        const li = templateCard.cloneNode(true) as HTMLLIElement;

        // Actualizamos el contenido
        const img = li.querySelector("img");
        if (img) {
          img.src = inv.thumb || "";
          img.alt = inv.title;
        }

        const titleEl = li.querySelector("h3");
        if (titleEl) titleEl.textContent = inv.title;

        li.dataset.index = (offset + i).toString();

        // Reset clases de animación si las tienes
        li.classList.remove("animate-fade-in");
        void li.offsetWidth; // trigger reflow para reiniciar animación
        li.classList.add("animate-fade-in");

        // Agregamos al grid
        grid.appendChild(li);

        // Asignamos el evento de modal
        attachCardModal(li);
      });

      showMoreBtn.classList.remove("is-loading");

      // Ocultar botón si no quedan más invitaciones
      const remaining = getMoreInvitaciones(grid.children.length);
      if (remaining.length === 0) {
        showMoreBtn.parentElement?.classList.add("hidden");
      }
    }, 300);
  });
</script>

<style>
  /* ✅ CAMBIO: CSS para manejar el estado de carga del botón */
  #show-more-btn .btn-loader {
    display: none; /* Oculto por defecto */
  }

  #show-more-btn.is-loading .btn-loader {
    display: flex; /* Se muestra cuando el botón está cargando */
    justify-content: center;
    align-items: center;
    gap: 8px;
  }

  #show-more-btn.is-loading .btn-text {
    display: none; /* Se oculta el texto cuando está cargando */
  }

  #show-more-btn.is-loading {
    cursor: wait;
  }

  /* Animación de los puntos del loader */
  .dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: var(--brand-indigo);
    animation: pulse-dot 1.4s ease-in-out infinite;
  }
  .dot:nth-child(2) {
    animation-delay: 0.2s;
  }
  .dot:nth-child(3) {
    animation-delay: 0.4s;
  }

  @keyframes pulse-dot {
    0%,
    100% {
      transform: scale(0.8);
      opacity: 0.5;
    }
    50% {
      transform: scale(1.2);
      opacity: 1;
    }
  }
</style>
