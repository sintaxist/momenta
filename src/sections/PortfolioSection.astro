---
import PortfolioCard from "@/components/PortfolioCard.astro";
import PortfolioModal from "@/components/PortfolioModal.astro";
import Button from "@/components/ui/Button.astro";
import {
  getFirstInvitaciones,
  getInvitacionModalData,
  getMoreInvitaciones
} from "@/data/invitaciones";

const invitaciones = getFirstInvitaciones();
---

<!-- Preconnect para acelerar Cloudinary -->
<link rel="preconnect" href="https://res.cloudinary.com" crossorigin />

<section id="demos" class="py-20 lg:py-32 px-6 relative overflow-x-hidden">
  <div class="absolute inset-0">
    <div class="absolute bottom-10 left-1/4 w-96 h-96 rounded-full opacity-10 bg-teal-500 blur-3xl"></div>
    <div class="absolute top-10 right-1/3 w-80 h-80 rounded-full opacity-10 bg-sky-500 blur-3xl"></div>
  </div>

  <div class="max-w-7xl mx-auto relative z-10">
    <!-- Headline -->
    <div class="text-center mb-20">
      <h2 class="font-sora font-bold text-4xl lg:text-6xl text-gray-900 mb-6">
        Invitaciones Digitales que <span class="text-indigo-600">Inspiran</span>
      </h2>
      <p class="font-sora font-normal text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed mb-8">
        Creamos experiencias únicas para bodas, eventos corporativos y
        celebraciones especiales. No usamos plantillas: cada invitación es
        diseñada y programada a la medida.
      </p>
    </div>

    <!-- Grid de proyectos -->
    <ul id="portfolio-grid" class="grid grid-cols-1 xs:grid-cols-2 lg:grid-cols-4 gap-6">
      {invitaciones.map((invitacion, index) => (
        <PortfolioCard project={invitacion} index={index} class="animate-on-scroll" />
      ))}
    </ul>

    <!-- Botón mostrar más -->
    <div id="show-more-container" class="text-center mt-16 hidden">
      <Button id="show-more-btn" variant="secondary" size="lg" className="xs:min-w-[280px] h-[56px]">
        <span class="btn-text">Mostrar Más Proyectos</span>
        <div class="btn-loader hidden">
          <span class="dot"></span><span class="dot"></span><span class="dot"></span>
        </div>
      </Button>
    </div>

    <!-- Nota de confianza -->
    <p class="text-center text-gray-500 text-sm mt-12 font-sora">
      ⭐ Tu invitación personalizada también podrá aparecer en nuestro
      portafolio para inspirar a otros clientes.
    </p>
  </div>

  <PortfolioModal />
</section>

<script is:inline type="module">
  import { getInvitacionModalData, getMoreInvitaciones } from "@/data/invitaciones";

  const grid = document.querySelector<HTMLUListElement>("#portfolio-grid");
  const showMoreBtn = document.querySelector<HTMLButtonElement>("#show-more-btn");

  if (grid) {

    function attachCardModal(card) {
      card.addEventListener("click", () => {
        const indexStr = card.dataset?.index;
        if (!indexStr) return;
        const index = parseInt(indexStr, 10);
        const data = getInvitacionModalData(index);
        if (data) {
          window.dispatchEvent(new CustomEvent("openModal", { detail: data }));
        }
      });
    }

    grid.querySelectorAll("li").forEach(attachCardModal);

    // IntersectionObserver para animaciones
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add("is-in-view");
          observer.unobserve(entry.target);
        }
      });
    }, { threshold: 0.25 });

    grid.querySelectorAll<HTMLLIElement>("li.animate-on-scroll").forEach((card) => observer.observe(card));

    // Manejar botón "Mostrar Más"
    if (showMoreBtn) {
      const showMoreContainer = showMoreBtn.parentElement;
      // Mostrar botón solo si hay más invitaciones
      if (getMoreInvitaciones(grid.children.length).length > 0) {
        showMoreContainer?.classList.remove("hidden");
      }

      showMoreBtn.addEventListener("click", () => {
        showMoreBtn.classList.add("is-loading");

        setTimeout(() => {
          const offset = grid.children.length;
          const newInvitaciones = getMoreInvitaciones(offset);

          const fragment = document.createDocumentFragment();

          newInvitaciones.forEach((inv, i) => {
            const li = document.createElement("li");
            li.dataset.index = (offset + i).toString();
            li.className = "animate-on-scroll";
            li.innerHTML = `
              <div class="card">
                <img 
                  src="${inv.thumb}" 
                  alt="${inv.title}" 
                  class="rounded-lg w-full" 
                  loading="lazy"
                  width="179"
                  height="129"
                />
                <h3 class="mt-2 font-semibold">${inv.title}</h3>
              </div>
            `;
            fragment.appendChild(li);
            attachCardModal(li);
            observer.observe(li);
          });

          grid.appendChild(fragment);
          showMoreBtn.classList.remove("is-loading");

          // Ocultar botón si ya no quedan más
          if (getMoreInvitaciones(grid.children.length).length === 0) {
            showMoreContainer?.classList.add("hidden");
          }
        }, 300);
      });
    }
  }
</script>

<style>
  /* Animaciones de cards */
  .animate-on-scroll {
    opacity: 0;
    transform: translateY(30px);
    transition: opacity 1s cubic-bezier(0.175, 0.885, 0.32, 1.275),
                transform 1s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    will-change: transform, opacity;
  }
  .animate-on-scroll.is-in-view {
    opacity: 1;
    transform: translateY(0);
  }

  /* Loader del botón "Mostrar más" */
  #show-more-btn .btn-loader {
    display: none;
  }
  #show-more-btn.is-loading .btn-loader {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 8px;
  }
  #show-more-btn.is-loading .btn-text {
    display: none;
  }
  #show-more-btn.is-loading {
    cursor: wait;
  }
  .dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: var(--brand-indigo);
    animation: pulse-dot 1.4s ease-in-out infinite;
  }
  .dot:nth-child(2) { animation-delay: 0.2s; }
  .dot:nth-child(3) { animation-delay: 0.4s; }

  @keyframes pulse-dot {
    0%,100% { transform: scale(0.8); opacity: 0.5; }
    50% { transform: scale(1.2); opacity: 1; }
  }
</style>
