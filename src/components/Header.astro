---
import Button from "@/components/ui/Button.astro";
import * as Icons from "@/components/ui/Icons.ts";
import AnimatedLogo from "./AnimatedLogo.astro";

const menuItems = [
  { id: "demos", label: "Demos" },
  { id: "features", label: "Features" },
  { id: "sobre-mi", label: "Nosotros" },
  { id: "paquetes", label: "Paquetes" },
  { id: "contacto", label: "Contacto" },
];
---

<header
  id="main-header"
  class="fixed top-0 left-0 right-0 z-51 transition-all duration-500"
>
  <div class="max-w-7xl mx-auto py-4 px-6">
    <div class="flex items-center justify-between">
      <a href="/" id="logo-link" aria-label="Ir al inicio Mömenta">
        <AnimatedLogo />
      </a>

      <nav
        id="desktop-nav"
        class="hidden md:flex items-center justify-center gap-x-6 lg:gap-x-8 relative"
      >
        {
          menuItems.map((item) => (
            <a
              href={`#${item.id}`}
              class="nav-link font-sora text-sm text-gray-600 hover:text-indigo-600 transition-colors duration-300 capitalize tracking-wide py-2"
              data-nav-link={item.id}
            >
              {item.label}
            </a>
          ))
        }
        <div id="nav-underline" class="nav-underline"></div>
      </nav>

      <div class="hidden md:flex">
        <Button
          href="https://calendly.com/momenta-invitaciones/nueva-reunion"
          target="_blank"
          size="md"
          icon={Icons.Calendar}
        >
          Agendar Meeting
        </Button>
      </div>

      <button
        id="mobile-menu-btn"
        class="md:hidden p-2 rounded-lg bg-white/20 backdrop-blur-sm border border-gray-300/50 text-gray-900 hover:bg-gray-100 transition-all duration-300 z-50"
      >
        <span id="menu-icon" class="w-5 h-5 flex items-center justify-center">
          <Fragment set:html={Icons.Menu} />
          <span class="sr-only">Menú</span>
        </span>
        <span
          id="close-icon"
          class="w-5 h-5 items-center justify-center hidden"
        >
          <Fragment set:html={Icons.X} />
          <span class="sr-only">Cerrar</span>
        </span>
      </button>
    </div>
  </div>
</header>
<div id="mobile-nav-panel" class="mobile-nav-panel md:hidden fixed pt-[80px] right-0 w-full h-full bg-white/95 backdrop-blur-xl border-l border-gray-200/50 shadow-2xl z-50">
      <div class="p-6 h-full flex flex-col" >
        <nav class="flex flex-col gap-4 space-y-2 flex-1">
          {
            menuItems.map((item) => (
              <a
                href={`#${item.id}`}
                class="nav-link mobile-nav-link text-center w-full rounded-lg p-4 font-bold transition duration-300 text-lg"
                data-nav-link={item.id}
              >
                {item.label}
              </a>
            ))
          }
          <div class="pt-4 border-t border-gray-200">
            <Button
              href="https://calendly.com/momenta-invitaciones/nueva-reunion"
              target="_blank"
              className="w-full"
              icon={Icons.Calendar}
            >
              Agendar Meeting
            </Button>
          </div>
        </nav>
      </div>
    </div>

<script>
  function updateUrlHash(sectionId: string, replace: boolean = false) {
    if (history.pushState) {
      if (replace) {
        history.replaceState(null, "", `#${sectionId}`);
      } else {
        history.pushState(null, "", `#${sectionId}`);
      }
    } else {
      window.location.hash = sectionId;
    }
  }

  function smoothScroll(target: HTMLElement, targetId: string) {
    const start = window.scrollY;
    const end = target.getBoundingClientRect().top + window.scrollY - 60;
    const duration = 50;
    let startTime: number | null = null;

    function easeInOutQuad(t: number): number {
      return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
    }

    function animation(currentTime: number) {
      if (startTime === null) startTime = currentTime;
      const timeElapsed = currentTime - startTime;
      const progress = Math.min(timeElapsed / duration, 1);
      const run = start + (end - start) * easeInOutQuad(progress);
      window.scrollTo(0, run);
      if (timeElapsed < duration) {
        requestAnimationFrame(animation);
      }
    }

    requestAnimationFrame(animation);
  }

  document.addEventListener("DOMContentLoaded", () => {
    const header = document.getElementById("main-header") as HTMLElement | null;
    const logoLink = document.getElementById(
      "logo-link"
    ) as HTMLAnchorElement | null;
    const mobileMenuBtn = document.getElementById(
      "mobile-menu-btn"
    ) as HTMLButtonElement | null;
    const mobileNavPanel = getElement<HTMLElement>("mobile-nav-panel");
    const menuIcon = getElement<HTMLElement>("menu-icon");
    const closeIcon = getElement<HTMLElement>("close-icon");
    const allNavLinks =
      document.querySelectorAll<HTMLAnchorElement>("a.nav-link");
    const desktopNavLinks = document.querySelectorAll<HTMLAnchorElement>(
      "#desktop-nav a.nav-link"
    );
    const mobileNavLinks = document.querySelectorAll<HTMLAnchorElement>(
      ".mobile-nav-panel a.nav-link"
    );
    const navUnderline = getElement<HTMLElement>("nav-underline");
    const sections = document.querySelectorAll<HTMLElement>("section[id]");

    if (
      !header ||
      !mobileMenuBtn ||
      !mobileNavPanel ||
      !menuIcon ||
      !closeIcon ||
      !navUnderline ||
      !logoLink
    ) {
      console.error("Error: faltan elementos del header.");
      return;
    }

    function getElement<T extends HTMLElement>(id: string): T {
      const el = document.getElementById(id);
      if (!el) throw new Error(`Elemento con id '${id}' no encontrado`);
      return el as T;
    }

    // Header scroll style
    const scrolledClasses = [
      "bg-white/80",
      "backdrop-blur-xl",
      "border-b",
      "border-gray-200/50",
      "shadow-lg",
    ];

    const handleScroll = () => {
      if (window.scrollY > 50) {
        header.classList.add(...scrolledClasses);
      } else {
        header.classList.remove(...scrolledClasses);
      }
    };
    window.addEventListener("scroll", handleScroll, { passive: true });

    handleScroll();

    // Menú móvil
    function closeMobileMenu(): void {
      mobileNavPanel.classList.remove("is-open");
      menuIcon.classList.remove("hidden");
      closeIcon.classList.add("hidden");
      document.body.style.overflow = "";
    }

    mobileMenuBtn.addEventListener("click", () => {
      const isOpen = mobileNavPanel.classList.toggle("is-open");
      menuIcon.classList.toggle("hidden", isOpen);
      closeIcon.classList.toggle("hidden", !isOpen);
      closeIcon.classList.add("flex");
      document.body.style.overflow = isOpen ? "hidden" : "";
      if(isOpen) {
        header.classList.remove(...scrolledClasses);
      } else {
        header.classList.add(...scrolledClasses);
      }
    });

    // Logo
    logoLink.addEventListener("click", (event) => {
      const hero = document.getElementById("hero");

      if (window.location.pathname === "/" && hero) {
        event.preventDefault();
        const targetY = hero.offsetTop - header.offsetHeight;
        smoothScroll(hero, "hero");
      } else {
        // si no estamos en home → mandamos a home con hash
        // logoLink.setAttribute("href", "/#hero");
      }
    });

    // Links
    allNavLinks.forEach((link) => {
      link.addEventListener("click", (event: MouseEvent) => {
        const href = link.getAttribute("href");
        const targetId = href ? href.substring(1) : null;

        if (!targetId) return;

        const targetEl = document.getElementById(targetId);

        // Si estamos en home
        if (window.location.pathname === "/" && targetEl) {
          event.preventDefault();
          smoothScroll(targetEl, targetId);

          if (mobileNavPanel.classList.contains("is-open")) {
            setTimeout(() => closeMobileMenu(), 150);
          }
        } else {
          // Si NO estamos en home, redirige a /#id
          link.setAttribute("href", `/#${targetId}`);
        }
      });
    });

    // Subrayado dinámico
    function updateUnderline(activeLink: HTMLElement | null): void {
      if (!activeLink) {
        navUnderline.style.width = "0";
        return;
      }

      const navRect = navUnderline.parentElement!.getBoundingClientRect();
      const linkRect = activeLink.getBoundingClientRect();

      const left = linkRect.left - navRect.left;

      requestAnimationFrame(() => {
        navUnderline.style.left = `${left}px`;
        navUnderline.style.width = `${linkRect.width}px`;
      });
    }

    function setActiveLink(sectionId: string): void {
      let activeDesktopLink: HTMLElement | null = null;
      desktopNavLinks.forEach((link) => {
        const isTarget = link.getAttribute("data-nav-link") === sectionId;
        link.classList.toggle("is-active", isTarget);
        if (isTarget) activeDesktopLink = link;
      });

      mobileNavLinks.forEach((link) => {
        link.classList.toggle(
          "is-active",
          link.getAttribute("data-nav-link") === sectionId
        );
      });

      updateUnderline(activeDesktopLink);

      // ✅ actualizar hash al hacer scroll natural
      // history.replaceState(null, "", `#${sectionId}`);
      history.replaceState(null, "", `/`);
    }

    // Observador de secciones
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const sectionId = entry.target.getAttribute("id");
            if (sectionId) {
              setActiveLink(sectionId);
              // updateUrlHash(sectionId, true);
            }
          }
        });
      },
      { rootMargin: "-40% 0px -40% 0px" }
    );

    sections.forEach((section) => observer.observe(section));

    // Resize
    let resizeTimeout: number | undefined;
    window.addEventListener("resize", () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = window.setTimeout(() => {
        if (
          window.innerWidth >= 768 &&
          mobileNavPanel.classList.contains("is-open")
        ) {
          closeMobileMenu();
        }
        const activeLink = document.querySelector<HTMLElement>(
          "#desktop-nav a.nav-link.is-active"
        );
        updateUnderline(activeLink);
      }, 100);
    });
  });

  window.addEventListener("load", () => {
    if (window.location.pathname === "/" && window.location.hash) {
      const targetId = window.location.hash.substring(1);
      const targetEl = document.getElementById(targetId);
      if (targetEl) {
        setTimeout(() => smoothScroll(targetEl, targetId), 200);
      }
    }
  });
</script>

<style>
  a.nav-link.is-active {
    color: var(--brand-indigo);
  }

  .nav-underline {
    position: absolute;
    bottom: 0;
    height: 2px;
    background-color: var(--brand-indigo);
    border-radius: 1px;
    transition:
      left 0.3s ease-in-out,
      width 0.3s ease-in-out;
  }

  .mobile-nav-panel {
    transform: translateX(100%);
    transition: transform 0.3s ease-in-out;
  }

  .mobile-nav-panel.is-open {
    transform: translateX(0);
  }

  .mobile-nav-link:hover,
  .mobile-nav-link.is-active {
    color: var(--brand-indigo);
    background-color: rgb(222, 237, 255);
  }

  .mobile-schedule-button button {
    border-radius: var(--radius-lg, 0.625rem) !important;
  }
</style>
